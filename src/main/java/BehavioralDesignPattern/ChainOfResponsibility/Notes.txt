Chain Of Responsibility:
- Lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either to process
the request or to pass it to the next handler.
- Chain of Responsibility is a behavioral design pattern that allows passing request along the chain of potential
  handlers until one of them handles request.


Problem:
- Consider an online ordering system. You want to restrict access to the system so only authenticated users can create order.
You users who have administrative permissions must have full access to all orders.
- Hence you need to perform the check sequentially. If a user cred is wrong, you stop there and no need to perform other checks.
- During the next few months you implemented several more seq checks like,
1. Adding sanitize data in a request.
2. Add a check that filters repeated failed req from the same IP addr.
3. Cache result on repeated requests containing the same data.
So adding new checks makes the system more complicated. The system became very hard to comprehend and expensive to maintain.


Solution:
- Chain of Responsibility relies on transforming particular behaviors into stand-alone objects called handlers.
- Each check should be extracted to its own class with a single method that performs the check.
  The req along with its data is passed to this method as an argument.
- The pattern suggests that you link these handlers into a chain. Each linked handler has a field for storing a reference
  to the next handler in the chain. In addition to processing a request, handlers pass the request further along the chain.
  The request travels along the chain until all handlers have had a chance to process it.
- Here’s the best part: a handler can decide not to pass the request further down the chain and effectively stop any further processing.


Applicability
- Use the Chain of Responsibility pattern when your program is expected to process different kinds of requests in
  various ways, but the exact types of requests and their sequences are unknown beforehand.
-- The pattern lets you link several handlers into one chain and, upon receiving a request, “ask” each handler whether
   it can process it. This way all handlers get a chance to process the request.

- Use the pattern when it's essential to execute several handlers in a particular order.
-- Since you can link the handlers in the chain in any order, all requests will get through the chain exactly as you planned.

- Use the CoR pattern when the set of handlers and their order are supposed to change at runtime.
-- If you provide setters for a reference field inside the handler classes, you’ll be able to insert, remove or reorder handlers dynamically.


How to Implement
1. Declare the handler interface and describe the signature of a method for handling requests.
   - Decide how the client will pass the request data into the method. The most flexible way is to convert the request
     into an object and pass it to the handling method as an argument.

2. To eliminate duplicate boilerplate code in concrete handlers, it might be worth creating an abstract base handler
   class, derived from the handler interface.
   - This class should have a field for storing a reference to the next handler in the chain. Consider making the class immutable.
     However, if you plan to modify chains at runtime, you need to define a setter for altering the value of the reference field.
   - You can also implement the convenient default behavior for the handling method, which is to forward the request to the next
     object unless there's none left. Concrete handlers will be able to use this behavior by calling the parent method.

3. One by one create concrete handler subclasses and implement their handling methods.
   Each handler should make two decisions when receiving a request:
   - Whether it'll process the request.
   - Whether it'll pass the request along the chain.

4. The client may either assemble chains on its own or receive pre-built chains from other objects. In the latter case,
   you must implement some factory classes to build chains according to the configuration or environment settings.

5. The client may trigger any handler in the chain, not just the first one. The request will be passed along the chain
   until some handler refuses to pass it further or until it reaches the end of the chain.

6. Due to the dynamic nature of the chain, the client should be ready to handle the following scenarios:
   - The chain may consist of a single link.
   - Some requests may not reach the end of the chain.
   - Others may reach the end of the chain unhandled.
