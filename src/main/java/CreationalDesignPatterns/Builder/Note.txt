Builder Pattern
- Construct complex objects step by step.
- Produce different types and representations of an object using the same construction code.

Problem:
Imagine a complex object that requires step-by-step initialization of many fields and nested objects.
Such initialization code is usually buried inside a monstrous constructor with lots of parameters.
For every new attribute you need to create another constructor.
The constructor with lots of parameters has its downside: not all the parameters are needed at all times.

Solution:
The Builder pattern suggests that you extract the object construction code out of its own class and move it to separate
objects called builders. You can call only those steps that are necessary for producing a particular configuration of an object.


Applicability
Use the Builder pattern to get rid of a “telescoping constructor”.
Say you have a constructor with ten optional parameters. Calling such a beast is very inconvenient; therefore, you
overload the constructor and create several shorter versions with fewer parameters. These constructors still refer to
the main one, passing some default values into any omitted parameters.
class Pizza {
    Pizza(int size) { ... }
    Pizza(int size, boolean cheese) { ... }
    Pizza(int size, boolean cheese, boolean pepperoni) { ... }
    // ...

Creating such a monster is only possible in languages that support method overloading, such as C# or Java.
The Builder pattern lets you build objects step by step, using only those steps that you really need. After
implementing the pattern, you don’t have to cram dozens of parameters into your constructors anymore.

Example1:
Create a car builder to build majorly two types of car.
- CarBuilder (Automatic)
- ManualCarBuilder (Manual)
Create an interface builder and provide abstract methods for building the cars.
Optional: We can create a director which takes the builder (automatic, manual) and build the cars using some known steps.
