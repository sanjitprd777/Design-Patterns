Singleton Pattern
- Ensure that a class has only one instance.
- Provide a global access point to that instance.


Problem:
Ensure that a class has just a single instance.
Why would anyone want to control how many instances a class has?
The most common reason for this is to control access to some shared resource. For example, a database or a file.

Provide a global access point to that instance.
Remember those global variables that you used to store some essential objects?
While they’re very handy, they’re also very unsafe since any code can potentially overwrite the contents of those
variables and crash the app.

Singleton pattern lets you access some object from anywhere in the program.
However, it also protects that instance from being overwritten by other code.


Solution:
- Make the default constructor private, to prevent other objects from using the new operator with the Singleton class.
- Create a static creation method that acts as a constructor. Under the hood, this method calls the private constructor
to create an object and saves it in a static field. All following calls to this method return the cached object.
- If your code has access to the Singleton class, then it’s able to call the Singleton’s static method.
So whenever that method is called, the same object is always returned.

