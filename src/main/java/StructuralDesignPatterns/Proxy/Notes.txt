Proxy Pattern:
- Proxy is a structural design pattern that lets you provide a substitute or placeholder for another object.
  A proxy controls access to the original object, allowing you to perform something either before or after the
  request gets through to the original object.
- Proxy is a structural design pattern that provides an object that acts as a substitute for a real service object
  used by a client. A proxy receives client requests, does some work (access control, caching, etc.) and then passes
  the request to a service object.


Problem:
Suppose there is a massive object that consumes a lot of system resources. When a client creates an object and wants to
access this massive object, it creates this object again and again. One way to stop this is to provide lazy initialization.
But all the object's clients would need to execute deferred initialization code causing duplication a lot.


Solution:
- The Proxy pattern suggests that you create a new proxy class with the same interface as an original service object.
Then you update your app so that it passes the proxy object to all the original object’s clients.
Upon receiving a request from a client, the proxy creates a real service object and delegates all the work to it.
- But what’s the benefit? If you need to execute something either before or after the primary logic of the class,
the proxy lets you do this without changing that class. Since the proxy implements the same interface as the original
class, it can be passed to any client that expects a real service object.


How to Implement:
1. If there's no pre-existing service interface, create one to make proxy and service objects interchangeable.
   Extracting the interface from the service class isn’t always possible, because you’d need to change all the service’s
   clients to use that interface. Plan B is to make the proxy a subclass of the service class, and this way it’ll inherit
   the interface of the service.
2. Create the proxy class. It should have a field for storing a reference to the service. Usually, proxies create and
   manage the whole life cycle of their services. On rare occasions, a service is passed to the proxy via a constructor by the client.
3. Implement the proxy methods according to their purposes. In most cases, after doing some work, the proxy should
   delegate the work to the service object.
4. Consider introducing a creation method that decides whether the client gets a proxy or a real service. This can be a
   simple static method in the proxy class or a full-blown factory method.
5. Consider implementing lazy initialization for the service object.