Facade Pattern:
- Provides a simple interface to a library, a framework, or any other complex set of classes.
- Facade is a structural design pattern that provides a simplified (but limited) interface to a complex system of
classes, library or framework.


Problem:
- Imagine that you must make your code work with a broad set of objects that belong to a sophisticated library or
framework. Ordinarily, youâ€™d need to initialize all of those objects, keep track of dependencies, execute methods
in the correct order, and so on.
- As a result, the business logic of your classes would become tightly coupled to the implementation details of
3rd-party classes, making it hard to comprehend and maintain.

Solution:
- A facade is a class that provides a simple interface to a complex subsystem which contains lots of moving parts.
- A facade might provide limited functionality in comparison to working with the subsystem directly. However, it
includes only those features that clients really care about.


Applicability:
- Use the Facade pattern when you need to have a limited but straightforward interface to a complex subsystem.
- Use the Facade when you want to structure a subsystem into layers.
- Create facades to define entry points to each level of a subsystem. You can reduce coupling between multiple
subsystems by requiring them to communicate only through facades.

