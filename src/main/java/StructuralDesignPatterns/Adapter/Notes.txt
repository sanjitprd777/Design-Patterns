Adapter Pattern:
- Allows objects with incomplete interfaces to collaborate.

Note: It's a bridge between existing interface and expected interface.

Problem:
You create an app that generates data analytics and provides final data in XML format.
Now you want to integrate new features, but the 3-rd party source accepts data in JSON.
You have to change the 3rd party library implementation, which might be impossible. Or convert data from XML to JSON.

Solution:
Create an adapter, this is a special object that converts the interface of one object to another that can understand it.
It can wrap one object to hide the complexity of conversion happening behind the scenes. The wrapped object isn't aware of the adapter.

Adapters can not only convert data into various formats but can also help objects with different interfaces collaborate.
Here’s how it works:
- The adapter gets an interface, compatible with one of the existing objects.
- Using this interface, the existing object can safely call the adapter’s methods.
- Upon receiving a call, the adapter passes the request to the second object, but in a format and order that the second object expects.

IMP:
The Adapter is a class that’s able to work with both the client and the service: it implements the client interface,
while wrapping the service object. The adapter receives calls from the client via the adapter interface and
translates them into calls to the wrapped service object in a format it can understand.

