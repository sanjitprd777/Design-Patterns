Decorator Pattern:
Decorator is a structural pattern that allows adding new behaviors to objects dynamically by placing them inside
special wrapper objects, called decorators.
- Add new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors.
- The Decorator Pattern attaches additional responsibilities to an object dynamically. Decorators provide a flexible
  alternative to subclassing for extending functionality.


Problem:
Consider a notification library which aims to notify the user from an app based on events.
It consists of a few fields and a constructor and a single send() method. The method accepts an argument from a client
and sends the message to a list of "emails" passed to the notifier via its constructor.
Now, you want to add more features to notify user than just using email notification like SMS, Slack, etc.

One solution is to extend the Notifier class and put additional notification methods in new subclasses.
What if we want multiple notificaiton functionalities, create another subclass supporting multiple notify functionalities.


Solution:
Using a decorator pattern, we can define an interface and implement a base decorator class.
We can also create another wrapper class that defines concrete wrapper functionalities which can be applied to the base
wrapper object.


Applicability
- Use the Decorator pattern when you need to be able to assign extra behaviors to objects at
runtime without breaking the code that uses these objects.
- The Decorator lets you structure your business logic into layers, create a decorator for each layer and
compose objects with various combinations of this logic at runtime. The client code can treat all these objects in the
same way, since they all follow a common interface.
- Use the pattern when it's awkward or not possible to extend an object's behavior using inheritance.
- Many programming languages have the final keyword that can be used to prevent a further extension of a class.
For a final class, the only way to reuse the existing behavior would be to wrap the class with
your own wrapper, using the Decorator pattern.


How to Implement
1. Make sure your business domain can be represented as a primary component with multiple optional layers over it.
2. Figure out what methods are common to both the primary component and the optional layers. Create a component
   interface and declare those methods there.Create a concrete component class and define the base behavior in it.
3. Create a base decorator class. It should have a field for storing a reference to a wrapped object. The field
   should be declared with the component interface type to allow linking to concrete components as well as decorators.
   The base decorator must delegate all work to the wrapped object.
4. Make sure all classes implement the component interface.
5. Create concrete decorators by extending them from the base decorator. A concrete decorator must execute its behavior
   before or after the call to the parent method (which always delegates to the wrapped object).
6. The client code must be responsible for creating decorators and composing them in the way the client needs.
